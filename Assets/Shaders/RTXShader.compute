// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "shader.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> _skybox;
SamplerState sampler_skybox;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
static const int MAX_DEPTH = 4;
static const float IOR = 2.1f;
static Plane planes[6];
//static const int N = 4;
//static Sphere spheres[N];
static Box box;
static Point source;
static State states[MAX_DEPTH - 1];

bool FindHit(inout State state)
{   
    BoxHit(box, state.ray, state.hit);
    for (int i = 0; i < 1; ++i) 
    {
        if (PlaneHit(planes[i], state.ray, state.hit))
        {
            float3 v = 4 * (state.hit.pos.xyz - planes[i].pos.xyz);
            bool b = state.hit.n.y;
            state.hit.mat.rho = planes[i].mat.rho * (b * cos(v.x)*cos(v.z) + !b * cos(v.x)*cos(v.y) > 0);
        }
    }

	state.kr_d_out.z = dot(state.ray.dir, state.hit.n) < 0;
	
	return state.hit.dist_type[0] < MAX_DIST;
}

void Refract(inout State state) 
{ 
	float cosi = dot(state.ray.dir, state.hit.n);
	float3 n = state.kr_d_out.z ? state.hit.n : -state.hit.n; 
	float eta = pow(IOR, !state.kr_d_out.z - state.kr_d_out.z);
	float k = 1.0f - eta * eta * (1 - cosi * cosi);
	state.ray.dir = (k < 0) ? Black() : normalize(eta * state.ray.dir + (eta * abs(cosi) - sqrt(k)) * n);
	state.ray.origin = state.hit.pos;
	state.ray.origin += (state.kr_d_out.z ? -EPSILON : EPSILON) * state.hit.n;
}

void Reflect(inout State state) 
{
    state.ray.dir = normalize(reflect(state.ray.dir, state.hit.n));
    state.ray.origin = state.hit.pos;
    state.ray.origin += (state.kr_d_out.z ? EPSILON : -EPSILON) * state.hit.n;
}

bool Fresnel(inout State state) 
{
	float cosi = dot(state.ray.dir, state.hit.n);
	bool b = (cosi > 0);
	float etai = b * IOR + !b;
	float etat = b + !b * IOR;
	float r0 = pow((etai - etat)/(etai + etat), 2);
	float k = r0 + (1 - r0) * pow((1 - abs(cosi)), 5);
	b = k < 1;
	state.kr_d_out.x = !b + b * k;
	return state.kr_d_out.x < 1;
}

void Shadow(inout State state) 
{
    State shadow;
    shadow.kr_d_out[1] = 0;
    shadow.kr_d_out[0] = 1;
    
    shadow.ray = CreateRay(state.hit.pos, normalize(source.pos - state.hit.pos));
    shadow.ray.origin += (state.kr_d_out.z ? EPSILON : -EPSILON) * state.hit.n;
    shadow.hit = CreateRayHit();
    state.hit.mat.rho *= state.kr_d_out.z + !state.kr_d_out.z * (1 - state.kr_d_out[0]);
    if ( !state.kr_d_out.z || dot(state.hit.n, shadow.ray.dir) < 0 || !FindHit(shadow) ) return;
    
    state.hit.mat.rho *= max(KS, (shadow.hit.dist_type[1] == TRANS) * abs(dot(shadow.ray.dir, shadow.hit.n)));
}

void Shade(inout State state) 
{   
    float3 n = (state.kr_d_out.z - !state.kr_d_out.z) * state.hit.n;
	float3 l = normalize(source.pos - state.hit.pos);
	float3 h = normalize(l - state.ray.dir);
	float d = length(source.pos - state.hit.pos);
	
	const float shininess = 60;
	const float intensity = 800;
	
    float3 outColour = max(dot(n, l), 0.0f) * state.hit.mat.rho;
	outColour += pow(max(dot(n, h), 0.0f), shininess) * source.mat.eps;
	outColour *= intensity / (1 + 4 * PI * d * d);
	outColour += KS * state.hit.mat.rho;
    state.hit.mat.rho = outColour;
    
    Shadow(state);
}

State Init(in float2 uv) 
{
    State state;
    state.ray = CreateCameraRay(_CameraToWorld, _CameraInverseProjection, uv);
    state.hit = CreateRayHit();
    state.kr_d_out.x = 1;
    state.kr_d_out.y = 0;
    state.kr_d_out.z = 1;
    
    source.pos = float3(0.0f, 1.9f, 6.9f);
    source.mat = CreateMaterial(Black(), float3(0.9f, 0.8f, 0.7f));
	
	box.pn[0] = float4(0,0.6,-1.4,1);
	box.pn[1] = float4(normalize(float3(0,-0.3f,4)),0.25f);
	box.pn[2] = float4(normalize(float3(-2.46,1.2,0.09)),0.25f);
	box.pn[3] = float4(normalize(cross(box.pn[1].xyz, box.pn[2].xyz)),0.25f);
	box.mat = CreateMaterial(float3(0.1f,0.2f,0.9f), Black());
	box.type = REFL;
	
	planes[0].pos = float3(0,-1,0);
	planes[0].n = float3(0,1,0);
	planes[0].mat = CreateMaterial(White(), KS * White());
    planes[0].type = REFL;
	
	planes[1].pos = float3(0,2,0);
	planes[1].n = float3(0,-1,0);
	planes[1].mat = CreateMaterial(Black(), KS * Black());
	planes[1].type = TRANS;
	
	planes[2].pos = float3(-2,0,0);
	planes[2].n = float3(1,0,0);
	planes[2].mat = CreateMaterial(Black(), KS * Black());
	planes[2].type = TRANS;
	
	planes[3].pos = float3(2,0,0);
	planes[3].n = float3(-1,0,0);
	planes[3].mat = CreateMaterial(Black(), KS * Black());
	planes[3].type = TRANS;
	
	planes[4].pos = float3(0,0,2);
	planes[4].n = float3(0,0,-1);
	planes[4].mat = CreateMaterial(White(), KS * White());
	planes[4].type = DIFF;
	
	planes[5].pos = float3(0,0,-6);
	planes[5].n = float3(0,0,1);
	planes[5].mat = CreateMaterial(White(), Black());
	planes[5].type = DIFF;
    
    return state;
}

void Push(inout int ptr, in State current) 
{
    if (ptr >= MAX_DEPTH - 1) return;
    states[ptr++] = current;
}

void Pop(inout int ptr, out State current) 
{
    current = states[--ptr];
}

void Trace(inout int ptr, inout float3 color, inout State current) 
{
    current.hit.dist_type[0] = MAX_DIST;
    
    if (current.kr_d_out[1] >= MAX_DEPTH || !FindHit(current)) 
    {
        if (!(current.hit.dist_type[0] < MAX_DIST)) 
        {
            float theta = acos(current.ray.dir.y) / -PI;
            float phi = atan2(current.ray.dir.x, -current.ray.dir.z) / -PI * 0.5f;
            color += _skybox.SampleLevel(sampler_skybox, float2(phi, theta), 0).xyz * KS * sin(PI * 0.5f * current.ray.dir.y);
        }
        if (ptr > 0) 
        {
            Pop(ptr, current);
            color += current.hit.mat.rho * current.kr_d_out[0];
            Reflect(current);
        }
        ++current.kr_d_out[1];
        return;
    } 
    Shade(current);
    if (current.hit.dist_type[1] == TRANS && Fresnel(current)) 
    {
        Push(ptr, current);
        color += current.hit.mat.rho * (1 - current.kr_d_out[0]);
        Refract(current);
    } 
    else if (current.hit.dist_type[1] != DIFF)
    {
        color += current.hit.mat.rho;
        Reflect(current);
    } 
    else 
    {
        color += current.hit.mat.rho;
        current.kr_d_out[1] = MAX_DEPTH;
    }
    ++current.kr_d_out[1];
}

float2 _pixelOffset;
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    /* ----Boilerplate---- */
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy + _pixelOffset) / float2(width, height) * 2.0f - 1.0f);
    State current = Init(uv);
    
    float3 color = Black();
    int stack_ptr = 0;
    /* ----Boilerplate---- */
    //if (FindHit(current)) 
    //{
        //Shade(current);
        //color += current.hit.mat.rho;
    //}
    int nodes = pow(2, MAX_DEPTH);
    for (int i = 0; i < nodes; ++i) 
    {
        Trace(stack_ptr, color, current);
    }
    
    
    Result[id.xy] = float4(color, 1);
}