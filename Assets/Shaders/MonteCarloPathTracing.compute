// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "shader.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
StructuredBuffer<Plane> _Planes;
StructuredBuffer<Box> _Boxes;
StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<Disc> _Discs;
StructuredBuffer<Quad> _Quads;
StructuredBuffer<int> _Sizes;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection; 
int _Seed;
float2 _PixelOffset;

static const int MAX_DEPTH = 5;
static const int SAMPLES = 2;

static State states[MAX_DEPTH];
static float factor = 1; 
float rnd()
{
	_Seed = int(fmod(float(_Seed)*1364.0+626.0 * factor, 509.0));
	return float(_Seed)/509.0;
}

float3 UniformHemisphere(in float3 normal) 
{
    float3 x, z; 
    CreateCoordinateSystem(normal, x, z);
    float2 r = float2(rnd(), rnd());
    float2 a = float2(sqrt(1 - r.x * r.x), 2 * PI * r.y);
    
    float3 output = float3(a.x * cos(a.y), r.x, a.x * sin(a.y));
    output = float3(
        output.x * z.x + output.y * normal.x + output.z * x.x, 
        output.x * z.y + output.y * normal.y + output.z * x.y, 
        output.x * z.z + output.y * normal.z + output.z * x.z
    );
    
    return normalize(output);  
}

float3 CosineHemisphere(in float3 normal) 
{
    float3 x, z; 
    CreateCoordinateSystem(normal, x, z);
    float2 r = float2(rnd(), rnd());
    float2 a = float2(sqrt(r.x), 2 * PI * r.y);
    
    float3 output = float3(a.x * cos(a.y), sqrt(1 - r.x), a.x * sin(a.y));
    output = float3(
        output.x * z.x + output.y * normal.x + output.z * x.x, 
        output.x * z.y + output.y * normal.y + output.z * x.y, 
        output.x * z.z + output.y * normal.z + output.z * x.z
    );
    
    return normalize(output);  
}

#define PLANE 0
#define BOX 1
#define SPHERE 2
#define DISC 3
#define QUAD 4

bool FindHit(inout State state)
{   
    state.hit.dist = 100000.0f;
    bool isHit = false;

    int n = _Sizes[PLANE];
    for (int k = 1; k < n; ++k) 
    {
        isHit = isHit || PlaneHit(_Planes[k], state.ray, state.hit);
    }
    
    n = _Sizes[BOX];
    for (int l = 1; l < n; ++l) 
    {
        isHit = isHit || BoxHit(_Boxes[l], state.ray, state.hit);
    }
    
    n = _Sizes[SPHERE];
    for (int i = 1; i < n; ++i) 
    {
        isHit = isHit || SphereHit(_Spheres[i], state.ray, state.hit);
    }
    n = _Sizes[DISC];
    for (int j = 1; j < n; ++j) 
    {
        isHit = isHit || DiscHit(_Discs[j], state.ray, state.hit);
    }
    n = _Sizes[QUAD];
    for (int m = 1; m < n; ++m) 
    {
        isHit = isHit || QuadHit(_Quads[m], state.ray, state.hit);
    }
    
    state.kr_d_out.z = dot(state.ray.dir, state.hit.p_n_o[1]) < 0;
	return isHit;
}

void Push(inout int ptr, in State current) 
{
    if (ptr >= MAX_DEPTH - 1) return;
    states[ptr++] = current;
}

void Pop(inout int ptr, out State current) 
{
    current = states[--ptr];
}

void Trace(inout int ptr, inout float3 color, inout State current) 
{
    bool hit = FindHit(current);
    if (current.kr_d_out[1] >= MAX_DEPTH || !hit) 
    {
        if (!hit) 
        {
            color = Black();
            current.kr_d_out[1] = MAX_DEPTH;
        }
        else if (ptr > 0) 
        {   
            Pop(ptr, current);
            float2 cosi_o = float2(dot(current.ray.dir, current.hit.p_n_o[1]), 
                                    dot(current.hit.p_n_o[2], current.hit.p_n_o[1]));
            float3 spec = CookTorrance(current, cosi_o[0], cosi_o[1]);
            float3 kd = (1 - spec) * (1 - current.hit.mat.rough_ior_metal[2]);
            color = current.hit.mat.eps + (kd * current.hit.mat.rho + spec * PI) * color;
            current.kr_d_out[1] = MAX_DEPTH;
        }
        return;
    }
    current.ray.origin = current.hit.p_n_o[0] + current.hit.p_n_o[1] * EPSILON;
    current.hit.p_n_o[2] = -current.ray.dir;
    current.ray.dir = CosineHemisphere(current.hit.p_n_o[1]);
    Push(ptr, current);
    ++current.kr_d_out[1];
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = (float2(id.xy) + _PixelOffset) / float2(width, height) * 2.0f - 1.0f;
    factor = length(uv);
    factor = frac(sin(dot(uv + float2(7,11),float2(31,167)*factor)) * _Seed);
    
    float3 pixel = Black();
    
    uint count = 2u << (MAX_DEPTH - 1);
    for (int i = 0; i < SAMPLES; ++i) {
        int ptr = 0;
        State current = NewState(uv, _CameraToWorld, _CameraInverseProjection);
        float3 color = Black();
        for (uint j = 0; j < count; ++j) 
        {
            Trace(ptr, color, current);
        }
        pixel += color;
    }
    
    Result[id.xy] = float4(pixel / SAMPLES, 1);
    
}
